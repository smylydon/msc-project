{"version":3,"sources":["parser.js"],"names":["window","parser","tokenize","value","m","results","tokenRegEx","exec","push","peek","tokens","position","next","createToken","type","token","parsePrimary","result","operatorRegex","test","right","parseAdditive","numberRegex","left","cellRegex","functionRegex","name","parseMultiplicative","expression","parse"],"mappings":"AAAA,YAAAA,QAAOC,OAAU,WAQhB,QAASC,GAASC,GAMjB,IALA,GAIIC,GAJAC,KACAC,EACH,2FAGuC,QAAhCF,EAAIE,EAAWC,KAAKJ,KAC3BE,EAAQG,KAAKJ,EAAE,GAEhB,OAAOC,GAGR,QAASI,KACR,GAAIN,GAAQO,EAAOC,EACnB,OAAOR,GAGR,QAASS,KACR,GAAIT,GAAQM,GAEZ,OADAE,KACOR,EAGR,QAASU,GAAYV,EAAOW,GAE3B,MADAH,MAECI,MAAOZ,EACPW,KAAMA,GAIR,QAASE,KACR,GAAIC,MACAd,EAAQM,GACZ,IAAIS,EAAcC,KAAKhB,GACtBc,EAASJ,EAAYV,EAAO,SAC5Bc,EAAOG,MAAQC,QACT,IAAIC,EAAYH,KAAKhB,GAC3Bc,EAASJ,EAAYV,EAAO,cACtB,IAAI,OAAOgB,KAAKhB,GACtBc,EAASJ,EAAYV,EAAO,aAC5Bc,EAAOM,KAAOF,IACdlB,EAAQM,IACM,MAAVN,IACHc,EAAOG,MAAQP,EAAYV,EAAO,mBAE7B,IAAIqB,EAAUL,KAAKhB,GACzBc,EAASJ,EAAYV,EAAO,gBACtB,IAAIsB,EAAcN,KAAKhB,GAAQ,CACrC,GAAIuB,GAAO,EACP,SAAQP,KAAKhB,GAChBuB,EAAO,MACG,gBAAgBP,KAAKhB,KAC/BuB,EAAO,QAERT,EAASJ,EAAYV,EAAOuB,OAE5BT,GAASJ,EAAYV,EAAO,GAG7B,OAAOc,GAGR,QAASU,KAIR,IAHA,GAAIC,GAAaZ,IACbD,EAAQN,IAEK,MAAVM,GAA2B,MAAVA,GACvBA,EAAQH,IACRgB,GACCb,MAAOA,EACPD,KAAM,WACNS,KAAMK,EACNR,MAAOJ,KAERD,EAAQN,GAET,OAAOmB,GAGR,QAASP,KAIR,IAHA,GAAIO,GAAaD,IACbZ,EAAQN,IAEK,MAAVM,GAA2B,MAAVA,GACvBA,EAAQH,IACRgB,GACCb,MAAOA,EACPD,KAAM,WACNS,KAAMK,EACNR,MAAOO,KAERZ,EAAQN,GAET,OAAOmB,GAGR,QAASC,GAAM1B,GAGd,MAFAQ,GAAW,EACXD,EAASR,EAASC,GACXkB,IA3GR,GAAII,GAAgB,mDAChBD,EAAY,cACZN,EAAgB,YAChBI,EAAc,gBACdX,EAAW,EACXD,IAyGJ,OAAOmB","file":"parser.js","sourcesContent":["window.parser = (function () {\n\tvar functionRegex = /(sum|avg|mean)\\(\\s*[a-z]\\d+\\s*:\\s*[a-z]\\d+\\s*\\)/i;\n\tvar cellRegex = /^[A-Z]\\d+$/i;\n\tvar operatorRegex = /[+\\-\\/\\*]/;\n\tvar numberRegex = /^\\d+(\\.\\d+)?$/;\n\tvar position = 0;\n\tvar tokens = [];\n\n\tfunction tokenize(value) {\n\t\tvar results = [];\n\t\tvar tokenRegEx =\n\t\t\t/([A-Z]\\d+|\\d+(\\.\\d+)?|[+\\-\\/\\*]|\\(|\\)|(sum|avg|mean)\\(\\s*[a-z]\\d+\\s*:\\s*[a-z]\\d+\\s*\\))/ig;\n\n\t\tvar m;\n\t\twhile ((m = tokenRegEx.exec(value)) !== null) {\n\t\t\tresults.push(m[0]); //save token\n\t\t}\n\t\treturn results;\n\t}\n\n\tfunction peek() {\n\t\tvar value = tokens[position];\n\t\treturn value;\n\t}\n\n\tfunction next() {\n\t\tvar value = peek();\n\t\tposition++;\n\t\treturn value;\n\t}\n\n\tfunction createToken(value, type) {\n\t\tposition++;\n\t\treturn {\n\t\t\ttoken: value,\n\t\t\ttype: type\n\t\t};\n\t}\n\n\tfunction parsePrimary() {\n\t\tvar result = {};\n\t\tvar value = peek();\n\t\tif (operatorRegex.test(value)) {\n\t\t\tresult = createToken(value, 'unary');\n\t\t\tresult.right = parseAdditive();\n\t\t} else if (numberRegex.test(value)) {\n\t\t\tresult = createToken(value, 'number');\n\t\t} else if (/^\\($/.test(value)) {\n\t\t\tresult = createToken(value, 'leftparen');\n\t\t\tresult.left = parseAdditive();\n\t\t\tvalue = peek();\n\t\t\tif (value === ')') {\n\t\t\t\tresult.right = createToken(value, 'rightparen');\n\t\t\t}\n\t\t} else if (cellRegex.test(value)) {\n\t\t\tresult = createToken(value, 'cellname');\n\t\t} else if (functionRegex.test(value)) {\n\t\t\tvar name = '';\n\t\t\tif (/sum/ig.test(value)) {\n\t\t\t\tname = 'sum';\n\t\t\t} else if (/^(avg|mean)/ig.test(value)) {\n\t\t\t\tname = \"mean\";\n\t\t\t}\n\t\t\tresult = createToken(value, name);\n\t\t} else {\n\t\t\tresult = createToken(value, '');\n\t\t}\n\t\t//console.log('valuing:', value, result);\n\t\treturn result;\n\t}\n\n\tfunction parseMultiplicative() {\n\t\tvar expression = parsePrimary();\n\t\tvar token = peek();\n\n\t\twhile (token === '*' || token === '/') {\n\t\t\ttoken = next();\n\t\t\texpression = {\n\t\t\t\ttoken: token,\n\t\t\t\ttype: 'operator',\n\t\t\t\tleft: expression,\n\t\t\t\tright: parsePrimary()\n\t\t\t};\n\t\t\ttoken = peek();\n\t\t}\n\t\treturn expression;\n\t}\n\n\tfunction parseAdditive() {\n\t\tvar expression = parseMultiplicative();\n\t\tvar token = peek();\n\n\t\twhile (token === '+' || token === '-') {\n\t\t\ttoken = next();\n\t\t\texpression = {\n\t\t\t\ttoken: token,\n\t\t\t\ttype: 'operator',\n\t\t\t\tleft: expression,\n\t\t\t\tright: parseMultiplicative()\n\t\t\t};\n\t\t\ttoken = peek();\n\t\t}\n\t\treturn expression;\n\t}\n\n\tfunction parse(value) {\n\t\tposition = 0;\n\t\ttokens = tokenize(value);\n\t\treturn parseAdditive();\n\t}\n\n\treturn parse;\n})();\n"],"sourceRoot":"/source/"}