{"version":3,"sources":["spreadsheet.js"],"names":["processElements","socketUpdate","socketMessage","INPUTS","each","index","elem","element","$","model","id","attr","cells","push","filter","data","onValue","value","formula","console","log","charAt","window","parser","substring","isNaN","parseFloat","val","localStorage","asEventStream","event","elementid","target","map","user_id","userId","socket","emit","_","Bacon","Cell","cell","this","bus","Bus","SpreadSheetFactory","SpreadSheet","addCells","prototype","isArray","Array","apply","addCell","removeCellsById","ids","forEach","remove","removeCellById","getSpreadSheet","spreadSheet","i","row","document","querySelector","insertRow","j","letter","String","fromCharCode","charCodeAt","insertCell","innerHTML","DATA","io","connect","on","fromBinder","sink"],"mappings":"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","file":"spreadsheet.js","sourcesContent":["/* eslint-disable */\nvar _ = _;\nvar Bacon = Bacon;\n/* eslint-enable */\n\nvar Cell = function (cell) {\n  this.id = cell.id;\n  this.element = cell.element;\n  this.bus = new Bacon.Bus();\n};\n\nvar SpreadSheetFactory = (function () {\n  function SpreadSheet(cells) {\n    this.bus = new Bacon.Bus();\n    this.cells = [];\n    this.addCells(cells);\n  }\n\n  SpreadSheet.prototype.addCells = function (cells) {\n    cells = _.isArray(cells) ? cells : [];\n    cells = cells.map(function (cell) {\n      return new Cell(cell);\n    });\n    Array.prototype.push.apply(this.cells, cells);\n  };\n\n  SpreadSheet.prototype.addCell = function (cell) {\n    this.cells.push(new Cell(cell));\n  };\n\n  SpreadSheet.prototype.removeCellsById = function (ids) {\n    ids = _.isArray(ids) ? ids : [];\n    _.forEach(ids, function (id) {\n      _.remove(this.cells, function (cell) {\n        return cell.id === id;\n      });\n    });\n  };\n\n  SpreadSheet.prototype.removeCellById = function (id) {\n    _.remove(this.cells, function (cell) {\n      return cell.id === id;\n    });\n  };\n\n  return {\n    getSpreadSheet: function (cells) {\n      return new SpreadSheet(cells);\n    }\n  };\n\n})();\n\nvar spreadSheet = SpreadSheetFactory.getSpreadSheet();\n\nfor (var i = 0; i < 6; i++) {\n  var row = document.querySelector(\"table\")\n    .insertRow(-1);\n  for (var j = 0; j < 6; j++) {\n    var letter = String.fromCharCode(\"A\".charCodeAt(0) + j - 1);\n    row.insertCell(-1)\n      .innerHTML = i && j ? \"<input id='\" + letter + i + \"'/>\" :\n      i || letter;\n  }\n}\n\nvar DATA = {};\n\nvar INPUTS = $('input'); //get all inputs\nvar cells = [];\n\nfunction processElements(socketUpdate, socketMessage) {\n  INPUTS.each(function (index, elem) {\n    var element = $(elem);\n    var model = {\n      element: element,\n      id: element.attr('id')\n    };\n\n    cells.push(model);\n\n    socketUpdate.filter(function (data) {\n      return data.element === model.id;\n    }).onValue(function (data) {\n      var value = data.formula;\n      console.log('socketUpdate:', data);\n\n      if (value.charAt(0) === \"=\") {\n        model.formula = value;\n        model.value = window.parser(value.substring(1));\n        //total = calculate(value);\n        //DATA\n        //return total;\n      } else {\n        value = isNaN(parseFloat(value)) ? value : parseFloat(value);\n        model.value = value;\n        model.formula = value;\n      }\n      element.val(model.value);\n      localStorage[model.id] = model.formula;\n      console.log('cell is:', model);\n    });\n\n    element.asEventStream('focus')\n      .onValue(function (event) {\n        var elementid = event.target.id;\n        var value = localStorage[elementid] || \"\";\n        element.val(value);\n        console.log('focusStream');\n      });\n\n    element.asEventStream('blur')\n      .map(function (event) {\n        var elementid = event.target.id;\n        var formula = event.target.value;\n        localStorage[elementid] = formula;\n        console.log('blurStream');\n        return {\n          element: elementid,\n          formula: formula,\n          user_id: userId\n        };\n      }).onValue(function (data) {\n        socket.emit('write', data);\n      });\n\n    function calculate(token) {\n      var left = 0;\n      var right = 0;\n      var value = 0;\n\n      if (token.type === 'number') {\n        value = parseFloat(token.token);\n      } else if (token.type === 'cellname') {\n        value = DATA[token.token];\n      } else if (token.type === 'unary') {\n        right = calculate(token.right);\n        value = token.token === '+' ? right : 0 - right;\n      } else if (token.type === \"leftparen\") {\n        left = calculate(token.left);\n        right = token.right;\n        if (right.type === 'rightparen') {\n          value = left;\n        }\n      } else if (token.type === 'operator') {\n        switch (token.token) {\n          case '+':\n          case '-':\n            left = calculate(token.left);\n            right = token.right ? calculate(token.right) : 0;\n            value = token.token === '+' ? (left + right) : (left - right);\n            break;\n          case '*':\n          case '/':\n            left = calculate(token.left);\n            right = token.right ? calculate(token.right) : 1;\n            value = token.token === '*' ? (left * right) : (left / right);\n            break;\n        }\n      }\n      return value;\n    }\n    /* eslint-disable */\n    function getter() {\n      var value = localStorage[element.attr('id')] || \"\";\n      var total = 0;\n      if (value.charAt(0) === \"=\") {\n        value = window.parser(value.substring(1));\n        total = calculate(value);\n        //DATA\n        return total;\n      } else {\n        return isNaN(parseFloat(value)) ? value : parseFloat(value);\n      }\n    }\n    /* eslint-enable */\n\n  });\n}\n\nvar userId;\n/* eslint-disable */\nvar socket = io.connect('http://localhost:5000');\n/* eslint-enable */\n\nsocket.on('connect', function (data) {\n  socket.emit('join', 'Hello World from client');\n\n  socket.on('userid', function (data) {\n    userId = data;\n\n    var socketUpdate = Bacon.fromBinder(function (sink) {\n      socket.on('update', function (data) {\n        sink(data);\n      });\n    });\n\n    var socketMessage = Bacon.fromBinder(function (sink) {\n      socket.on('messages', function (data) {\n        sink(data);\n      });\n    });\n\n    spreadSheet.addCells(cells);\n\n    processElements(socketUpdate, socketMessage);\n  });\n});\n"],"sourceRoot":"/source/"}