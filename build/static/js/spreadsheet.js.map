{"version":3,"sources":["spreadsheet.js"],"names":["contrainValue","value","min","max","_","isFinite","Math","drawSpreadSheet","width","height","table","document","querySelector","i","row","insertRow","j","letter","String","fromCharCode","charCodeAt","insertCell","innerHTML","processElements","socketUpdate","socketMessage","add","a","b","minus","multiply","divide","fetchAndCombine","token","combiner","pushers","right","left","calculate","Bacon","constant","combine","type","parseFloat","spreadSheet","getCellById","push","bus","updateCell","cell","element","val","pusher","INPUTS","each","index","elem","$","model","id","attr","cells","filter","data","onValue","formula","toUpperCase","test","isUndefined","charAt","substring","window","parser","x","console","log","forEach","asEventStream","event","elementid","target","map","user_id","userId","socket","emit","addCells","CellFactory","Cell","this","Bus","prototype","getNewCell","SpreadSheetFactory","SpreadSheet","find","isArray","Array","apply","addCell","removeCellsById","ids","remove","removeCellById","getSpreadSheet","io","connect","on","fromBinder","sink"],"mappings":"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","file":"spreadsheet.js","sourcesContent":["/* eslint-disable */\nvar _ = _;\nvar Bacon = Bacon;\n/* eslint-enable */\n\n/*\n * CellFactory\n */\nvar CellFactory = (function () {\n  /*\n   * Constructor\n   *\n   * param {Object} json object containing cell data\n   */\n  function Cell(data) {\n    this.id = data.id;\n    this.element = data.element;\n    this.value = 0;\n    this.bus = new Bacon.Bus();\n  }\n\n  /*\n   * pusher\n   *\n   * Pushes the current value to all subscribers.\n   *\n   */\n  Cell.prototype.pusher = function () {\n    this.bus.push(this.value);\n  };\n\n  return {\n    getNewCell: function (data) {\n      return new Cell(data);\n    }\n  };\n})();\n\n/*\n * SpreadSheetFactory\n */\nvar SpreadSheetFactory = (function () {\n  /*\n   * Constructor\n   *\n   * param {Array} optional array containing cell data.\n   */\n  function SpreadSheet(cells) {\n    this.cells = [];\n    this.addCells(cells);\n  }\n\n  /*\n   * getCellById\n   *\n   * Returns the the first cell taht match the id\n   * or returns undefined.\n   *\n   * param {string} id of cell\n   * return {Cell}\n   */\n  SpreadSheet.prototype.getCellById = function (id) {\n    return _.find(this.cells, {\n      id: id\n    });\n  };\n\n  /*\n   * addCells\n   *\n   * Accepts an array of json objects. A collection of\n   * Cell objects are create using the json objects.\n   * The cells are added to collection of spreadsheet\n   * cells.\n   *\n   * param {Array} an array of json objects\n   */\n  SpreadSheet.prototype.addCells = function (cells) {\n    cells = _.isArray(cells) ? cells : [];\n    cells = cells.map(function (data) {\n      return CellFactory.getNewCell(data);\n    });\n    Array.prototype.push.apply(this.cells, cells);\n  };\n\n  SpreadSheet.prototype.addCell = function (data) {\n    this.cells.push(CellFactory.getNewCell(data));\n  };\n\n  /*\n   * removeCellsById\n   *\n   * Accepts a list of cell ids. Cells matching each\n   * are removed one at a time from the collection\n   * of spreatsheet cells.\n   *\n   * param {Array} a list of ids to remove\n   */\n  SpreadSheet.prototype.removeCellsById = function (ids) {\n    ids = _.isArray(ids) ? ids : [];\n    _.forEach(ids, function (id) {\n      _.remove(this.cells, function (cell) {\n        return cell.id === id;\n      });\n    });\n  };\n\n  /*\n   * removeCellById\n   *\n   * Accepts an id of a cell that needs to be removed.\n   * Cells that match the id are removed one at a time\n   * from the collection of spreatsheet cells.\n   *\n   * param {String} id the id of the cell to be removed\n   */\n  SpreadSheet.prototype.removeCellById = function (id) {\n    _.remove(this.cells, function (cell) {\n      return cell.id === id;\n    });\n  };\n\n  return {\n    getSpreadSheet: function (cells) {\n      return new SpreadSheet(cells);\n    }\n  };\n\n})();\n\nvar spreadSheet = SpreadSheetFactory.getSpreadSheet();\n\nfunction contrainValue(value, min, max) {\n  min = min || 0;\n  max = max || 10;\n  value = _.isFinite(value) ? value : 1;\n  value = Math.max(min, value);\n  value = Math.min(max, value);\n  return value;\n}\n\n/*\n * drawSpreadSheet\n *\n * param {int} width\n * param {int} height\n * return void\n */\nfunction drawSpreadSheet(width, height) {\n  width = contrainValue(width, 1, 27);\n  height = contrainValue(height, 1, 20);\n\n  var table = document.querySelector(\"table\");\n\n  for (var i = 0; i < height; i++) {\n    var row = table.insertRow(-1);\n    for (var j = 0; j < width; j++) {\n      var letter = String.fromCharCode(\"A\".charCodeAt(0) + j - 1);\n      row.insertCell(-1)\n        .innerHTML = i && j ? \"<input id='\" + letter + i +\n        \"' class='spreadsheet-cell' />\" :\n        i || letter;\n    }\n  }\n}\n\ndrawSpreadSheet(10, 10);\n\nvar INPUTS = $('.spreadsheet-cell'); //get all inputs\nvar cells = [];\n\nfunction processElements(socketUpdate, socketMessage) {\n  function add(a, b) {\n    return a + b;\n  }\n\n  function minus(a, b) {\n    return a - b;\n  }\n\n  function multiply(a, b) {\n    return a * b;\n  }\n\n  function divide(a, b) {\n    if (b === 0) {\n      return 0;\n    }\n    return a / b;\n  }\n\n  function fetchAndCombine(token, combiner, pushers) {\n    var right = '';\n    var left = calculate(token.left, pushers);\n\n    if (token.right) {\n      right = calculate(token.right, pushers);\n    } else {\n      right = Bacon.constant(0);\n    }\n    return left.combine(right, combiner);\n  }\n\n  function calculate(token, pushers) {\n    var left = 0;\n    var right = 0;\n    var value = 0;\n\n    if (token.type === 'number') {\n      value = Bacon.constant(parseFloat(token.token));\n    } else if (token.type === 'cellname') {\n      value = spreadSheet.getCellById(token.token);\n      pushers.push(value);\n      value = value.bus;\n    } else if (token.type === 'unary') {\n      right = calculate(token.right, pushers);\n      if (token.token === '+') {\n        value = right;\n      } else {\n        left = Bacon.constant(0);\n        value = left.combine(right, minus);\n      }\n    } else if (token.type === \"leftparen\") {\n      left = calculate(token.left, pushers);\n      right = token.right;\n      if (right.type === 'rightparen') {\n        value = left;\n      }\n    } else if (token.type === 'operator') {\n\n      switch (token.token) {\n        case '+':\n          value = fetchAndCombine(token, add, pushers);\n          break;\n        case '-':\n          value = fetchAndCombine(token, minus, pushers);\n          break;\n        case '*':\n          value = fetchAndCombine(token, multiply, pushers);\n          break;\n        case '/':\n          value = fetchAndCombine(token, divide, pushers);\n          break;\n      }\n    }\n    return value;\n  }\n\n  function updateCell(cell, element, value) {\n    cell.value = value;\n    element.val(cell.value);\n    //localStorage[cell.id] = cell.formula;\n    cell.pusher();\n  }\n\n  INPUTS.each(function (index, elem) {\n    var element = $(elem);\n    var model = {\n      element: element,\n      id: element.attr('id')\n    };\n    var pushers = [];\n\n    cells.push(model);\n\n    socketUpdate.filter(function (data) {\n      return data.element === model.id;\n    }).onValue(function (data) {\n      var cell = spreadSheet.getCellById(data.element);\n      var value = data.formula.toUpperCase();\n      var test = true;\n      pushers = [];\n      cell.formula = value;\n      //      console.log(':', cell.formula, cell.value);\n      if (_.isUndefined(value) || value === '') {\n        updateCell(cell, element, 0);\n      } else {\n        if (value.charAt(0) === \"=\") {\n          value = value.substring(1);\n        }\n        value = window.parser(value);\n        calculate(value, pushers).onValue(function (x) {\n          console.log(':', cell.id, cell.formula, cell.value, test);\n          updateCell(cell, element, x);\n          test = false;\n        });\n        pushers.forEach(function (cell) {\n          cell.pusher();\n        });\n      }\n    });\n\n    element.asEventStream('focus')\n      .onValue(function (event) {\n        var elementid = event.target.id;\n        var cell = spreadSheet.getCellById(elementid);\n        var value = cell.formula; // || localStorage[elementid] || \"\";\n        console.log('cell:', cell);\n        element.val(value);\n      });\n\n    element.asEventStream('blur')\n      .map(function (event) {\n        var elementid = event.target.id;\n        var formula = event.target.value;\n        //localStorage[elementid] = formula;\n\n        return {\n          element: elementid,\n          formula: formula,\n          user_id: userId\n        };\n      }).onValue(function (data) {\n        socket.emit('write', data);\n      });\n  });\n\n  spreadSheet.addCells(cells);\n}\n\nvar userId;\n/* eslint-disable */\nvar socket = io.connect('http://localhost:5000');\n/* eslint-enable */\n\nsocket.on('connect', function (data) {\n  socket.emit('join', 'Hello World from client');\n\n  socket.on('userid', function (data) {\n    userId = data;\n  });\n\n  var socketUpdate = Bacon.fromBinder(function (sink) {\n    socket.on('update', function (data) {\n      sink(data);\n    });\n  });\n\n  var socketMessage = Bacon.fromBinder(function (sink) {\n    socket.on('messages', function (data) {\n      sink(data);\n    });\n  });\n\n  processElements(socketUpdate, socketMessage);\n});\n"],"sourceRoot":"/source/"}